openapi: 3.0.0
info:
  title: Effective mobile API
  description: API for Effective mobile test project
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /songs/all:
    get:
      summary: Get all songs
      responses:
        200:
          description: List of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  /songs/get_song:
    get:
      summary: Get a song by name
      parameters:
        - in: query
          name: song_name
          required: true
          schema:
            type: string
        - in: query
          name: group_name
          required: true
          schema:
            type: string
        - in: query
          name: verse_offset
          required: true
          schema:
            type: integer
        - in: query
          name: verse_limit
          required: true
          schema:
            type: integer
        
        
      responses:
        200:
          description: Song details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        400:
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: "Bad request"
        404:
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: "Song not found"
        
        500:
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"
                
  

  /new_song:
    post:
      summary: Create a new song
      requestBody:
        description: Song details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSongRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: "Bad request"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"
    
  /edit_song:
    post:
      summary: Edit a song
      requestBody:
        description: Song details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSongRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: "Bad request"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal server error"


  /delete_song:
    delete:
      summary: Delete a song
      parameters:
        - in: query
          name: group_name
          required: true
          schema:
            type: string
        - in: query
          name: song_name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad request


          

  /groups/all:
    get:
      summary: Get all groups
      responses:
        200:
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

        404:
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: "No groups found"


  /groups/songs:
    get:
      summary: Get all songs of a group
      parameters:
        - in: query
          name: group_name
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        404:
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: "No songs found"

  /groups/new_group:
    post:
      summary: Create a new group
      requestBody:
        description: Group details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: "Bad request"



components:
  schemas:
    Song:
      type: object
      properties:
        song_id:
          type: string
          format: uuid
        group_id:
          type: string
          format: uuid
        release_date:
          type: string
          format: date
          example: "2015-06-13"
          pattern: "YYYY-MM-DD"
        song_name:
          type: string
        song_text:
          type: string
        link:
          type: string


    Group:
      type: object
      properties:
        group_id:
          type: string
          format: uuid
        group_name:
          type: string


    NewSongRequest:
      type: object
      properties:
        song_name:
          type: string
        group_name:
          type: string
        release_date:
          type: string
          format: date
          example: "2015-06-13"
          pattern: "YYYY-MM-DD"
        song_text:
          type: string
        link:
          type: string
      required:
        - song_name
        - group_name

    NewGroupRequest:
      type: object
      properties:
        group_name:
          type: string
      required:
        - group_name


    EditSongRequest:
      type: object
      properties:
        song_name:
          type: string
        group_name:
          type: string
        release_date:
          type: string
          format: date
          example: "2015-06-13"
          pattern: "YYYY-MM-DD"
        song_text:
          type: string
        link:
          type: string
      required:
        - song_name
        - group_name